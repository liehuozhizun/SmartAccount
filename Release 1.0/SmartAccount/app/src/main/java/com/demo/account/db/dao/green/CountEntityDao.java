package com.demo.account.db.dao.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.demo.account.db.dao.CountEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNT_ENTITY".
*/
public class CountEntityDao extends AbstractDao<CountEntity, Long> {

    public static final String TABLENAME = "COUNT_ENTITY";

    /**
     * Properties of entity CountEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Money = new Property(3, Integer.class, "money", false, "MONEY");
        public final static Property ComeType = new Property(4, Integer.class, "comeType", false, "COME_TYPE");
        public final static Property Note = new Property(5, String.class, "note", false, "NOTE");
        public final static Property Date = new Property(6, java.util.Date.class, "date", false, "DATE");
    }


    public CountEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CountEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"TYPE\" INTEGER," + // 2: type
                "\"MONEY\" INTEGER," + // 3: money
                "\"COME_TYPE\" INTEGER," + // 4: comeType
                "\"NOTE\" TEXT," + // 5: note
                "\"DATE\" INTEGER);"); // 6: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CountEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Integer money = entity.getMoney();
        if (money != null) {
            stmt.bindLong(4, money);
        }
 
        Integer comeType = entity.getComeType();
        if (comeType != null) {
            stmt.bindLong(5, comeType);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CountEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Integer money = entity.getMoney();
        if (money != null) {
            stmt.bindLong(4, money);
        }
 
        Integer comeType = entity.getComeType();
        if (comeType != null) {
            stmt.bindLong(5, comeType);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CountEntity readEntity(Cursor cursor, int offset) {
        CountEntity entity = new CountEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // money
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // comeType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // note
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CountEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMoney(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setComeType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CountEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CountEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CountEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
